<?php

/**
 * @file
 * Contains een_base.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\path_alias\Entity\PathAlias;

/**
 * Implements hook_page_attachments().
 */
function een_base_page_attachments(&$page) {
  if (Drupal::service('router.admin_context')
      ->isAdminRoute() && !Drupal::currentUser()->isAnonymous()) {
    $page['#attached']['library'][] = 'een_base/admin_overrides';
  }
}


/**
 * Implements hook_language_fallback_candidates_OPERATION_alter().
 */
function een_base_language_fallback_candidates_entity_view_alter(array &$candidates, array $context) {
  // Prevent paragraph fallbacks when unpublished translation
  if ($context['data']->getEntityTypeId() == 'paragraph') {
    $candidates = [];
  }
}

/**
 * Implements hook_entity_view().
 *
 * Handles the 'show_in_links' and 'show_as_field' flag options.
 */
function een_base_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() === 'forum' || $entity->bundle() === 'forums') {
    if ($entity->hasField('comment_forum') && $entity->comment_forum) {
      if ($entity->getEntityTypeId() == 'node') {
        if ($entity->comment_forum->status != 2) {
          unset($build['forum_notifications_subscription']);
        }
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function een_base_paragraph_view(array &$build, EntityInterface $paragraph, EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('disabled_preview_message')) {
    $bundles = Drupal::service('entity_type.bundle.info')
      ->getBundleInfo('paragraph');
    $label = $bundles[$paragraph->bundle()]['label'];

    $build['disabled_preview_message'] = [
      '#markup' => new FormattableMarkup('<div class="messages messages--warning"><strong>:label</strong> :reason</div>', [
        ':label' => t('Paragraph :bundle', [':bundle' => $label]),
        ':reason' => t('can not be previewed when editing content.'),
      ]),
    ];
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function een_base_form_alter(&$form, &$form_state, &$form_id): void {
  $form['comment_body']['widget']['#after_build'][] = '_allowed_formats_remove_textarea_help';
}


/**
 * @param $form_element
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *
 * @return array
 */
function _allowed_formats_remove_textarea_help($form_element, FormStateInterface $form_state): array {
  if (isset($form_element[0]['format'])) {
    // All this stuff is needed to hide the help text.
    unset($form_element[0]['format']['guidelines']);
    unset($form_element[0]['format']['help']);
    unset($form_element[0]['format']['#type']);
    unset($form_element[0]['format']['#theme_wrappers']);
    $form_element[0]['format']['format']['#access'] = FALSE;
  }

  return $form_element;
}

/**
 * @param $alias
 * @param array $context
 *
 * @return void
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function een_base_pathauto_alias_alter(&$alias, array &$context): void {

  if (!empty($context['data']['term']) && $context['data']['term']->bundle() == 'forums') {

    $alias_bk = $alias;
    $alias = preg_replace('~^/forum/~', '/forum_term/', $alias);

    $tid = $context['data']['term']->id();

    $pids = Drupal::entityQuery('path_alias')
      ->condition('path', '/forum/' . $tid)
      ->accessCheck(FALSE)
      ->execute();

    if ($pids) {
      $pids = array_values($pids);
      $pid_main = $pids[0];

      unset($pids[0]);

      foreach ($pids as $pid) {
        $alias_to_del = PathAlias::load($pid);
        if ($alias_to_del) {
          $alias_to_del->delete();
        }
      }

      $alias_to_change = PathAlias::load($pid_main);
      if ($alias_to_change) {
        $alias_to_change->set('alias', $alias_bk)->save();
      }
    }
    else {
      $path_alias = PathAlias::create([
        'path'  => '/forum/' . $tid,
        'alias' => $alias_bk,
      ]);

      $path_alias->save();
    }
  }
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 *
 * @return \null[][][]
 */
function een_base_theme($existing, $type, $theme, $path): array {
  return [
    'info_popup_block' => [
      'variables' => [
        'prod_url' => NULL,
      ],
      'template' => 'info-popup-block',
    ],
  ];
}
