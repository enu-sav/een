<?php
/**
 * @file
 * Functions to support theming in the een theme.
 */

use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\node\Entity\Node;

/**
 * Implements template_preprocess_html().
 */
function een_preprocess_html(&$variables): void {
  // Get the current node from the route.
  $node = \Drupal::routeMatch()->getParameter('node');

  // Check if the node exists and is a NodeInterface instance.
  if ($node instanceof \Drupal\node\NodeInterface) {
    // Check if the content type of the node is "page".
    if ($node->bundle() == 'page') {
      // Now check if the 'field_hero_section' field is empty or not.
      if (empty($node->get('field_hero_section')->getValue())) {
        // Add 'not-hero' class if the field is empty.
        $variables['attributes']['class'][] = 'not-hero';
      } else {
        // Add 'hero' class if the field is not empty.
        $variables['attributes']['class'][] = 'hero';
      }
    } else {
      $variables['attributes']['class'][] = 'not-hero';
    }
  }
}

/**
 * @param $variables
 *
 * @return void
 */
function een_preprocess_forums(&$variables): void {
  if (!empty($variables['topics'])) {

    $rows = [];
    /** @var Node $node */
    foreach ($variables['topics_original'] as $nid => $node) {
      $topic_views = '0';

      /** @var \Drupal\statistics\StatisticsViewsResult $statistics */
      $statistics = Drupal::service('statistics.storage.node')->fetchView($node->id());

      if ($statistics !== FALSE) {
        $topic_views = Drupal::translation()->formatPlural($statistics->getTotalCount(), '1', '@count');
      }

      $comment_count = $node->comment_count;

      if ($comment_count == 1) {
        $topic_comment_count = $comment_count . ' ' . t('the answer');
      } else {
        $topic_comment_count = $comment_count . ' ' . t('the answers');
      }

      $last_reaction = getHumanLastComment($node->last_comment_timestamp);

      $view_builder = Drupal::entityTypeManager()->getViewBuilder('user');
      $build_owner = $view_builder->view($node->getOwner(), 'compact');
      $user = Drupal::service('renderer')->renderRoot($build_owner);

      $row = [
        [
          'data' => Link::fromTextAndUrl($node->getTitle(), Url::fromRoute('entity.node.canonical', ['node' => $nid])),
          'class' => ['forum-topics__row__topic-name'],
        ],
        [
          'data' => [
            '#markup' => '<div class="forum-topics__row__count__views">' . $topic_views . '</div><div class="forum-topics__row__count__comments">' . $topic_comment_count . '</div>',
          ],
          'class' => ['forum-topics__row__count'],
        ],
        [
          'data' => [
            '#markup' => '<div class="forum-topics__row__meta__author">' . $user->__toString() . ' / ' . date('d.m.Y - h:i', $node->getCreatedTime()) . '</div><div class="forum-topics__row__meta__reply">Posledný príspevok: ' . $last_reaction . '</div>',
          ],
          'class' => ['forum-topics__row__meta'],
        ],
      ];
      $rows[] = $row;
    }

    $variables['topics']['#rows'] = $rows;
  }
}

/**
 * Implements hook_preprocess_menu_local_action().
 */
function een_preprocess_menu_local_action(&$variables): void {
  if (!empty($variables['link']['#title'])) {
    $route_name = \Drupal::routeMatch()->getRouteName();
    if ($route_name == 'forum.index' || $route_name == 'forum.page') {
      unset($variables['link']);
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * @param array $suggestions
 * @param array $variables
 */
function een_theme_suggestions_user_alter(array &$suggestions, array &$variables): void {
  // Define the view mode.
  $mode = $variables['elements']['#view_mode'];
  // Create a theme hook suggestion which has the view mode name in it.
  $suggestions[] = 'user__' . $mode;
  $variables['view_mode'] = $mode;
}

/**
 * @param int $last_reaction
 *
 * @return string
 */
function getHumanLastComment($last_reaction) {
  if (($diff = (time() - $last_reaction)) > 2592000) {
    $last_reaction = date("d. M Y", $last_reaction);
  }
  else {
    if ($diff >= 86400) {
      $last_reaction = round($diff / 86400) . 'd';
    }
    elseif ($diff >= 3600) {
      $last_reaction = round($diff / 3600) . 'h';
    }
    else {
      $last_reaction = round($diff / 60) . 'm';
    }
  }
  return $last_reaction;
}
